# -*- coding: utf-8 -*-
"""Proyecto IA DIEGO VERA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmxZoVlTNEZz1OA3_T-Wy55O3QJdfDKP

Este proyecto trata sobre un detector de noticias falsas o veridicas, usando el dataset de kaggle Fake News (https://www.kaggle.com/c/fake-news/data?select=train.csv)
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk 
nltk.download('stopwords')
print(stopwords.words('english'))

"""Manejo de la info del dataset"""

datosnuevos = pd.read_csv('/content/train.csv')

datosnuevos.shape
datosnuevos.head()

datosnuevos.isnull().sum()

datosnuevos = datosnuevos.fillna('')

datosnuevos['content'] = datosnuevos['author']+' '+datosnuevos['title']

print(datosnuevos['content'])

X = datosnuevos.drop(columns= 'label',axis=1)  #guardo todo menos el label
Y = datosnuevos['label'] # Separo solo el label en una sola

print(X)
print(Y)

"""Simplificacion de las palabras"""

port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

datosnuevos['content'] = datosnuevos['content'].apply(stemming)

print(datosnuevos['content'])

X = datosnuevos['content'].values
Y = datosnuevos['label'].values

print(X)

print(Y)
Y.shape

"""Vectorizamos las palabras"""

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Division del dataset para probar"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

"""Regresion logistica, entrenamiento para ser campeon pokemon

"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Calificamos al campeon pokemon"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""a√±adiendo superpoderes al modelo pokemon

"""

X_new = X_test[19]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('La noticia es veridica')
else:
  print('La noticia es falsa')

